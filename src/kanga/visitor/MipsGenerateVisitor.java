//
//Generated by JTB 1.3.2
//

package kanga.visitor;

import java.util.*;

import kanga.syntaxtree.*;
import kanga.visitor.*;

/**
* Provides default methods which visit each node in the tree in depth-first
* order.  Your visitors may extend this class.
*/
public class MipsGenerateVisitor extends GJNoArguDepthFirst<String> {
//
// Auto class visitors--probably don't need to be overridden.
//
private int expType;
private int simpleType;
private int opType;
private Stack<Integer> stackPars;
	
public MipsGenerateVisitor() {
	stackPars=new Stack<Integer>();
}
	
public void printx(String str) {
	System.out.println(str);
}

public String visit(NodeList n) {
   String _ret=null;
   int _count=0;
   for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
      e.nextElement().accept(this);
      _count++;
   }
   return _ret;
}

public String visit(NodeListOptional n) {
   if ( n.present() ) {
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }
   else
      return null;
}

public String visit(NodeOptional n) {
   if ( n.present() ) {
	   String label=n.node.accept(this);
	   printx(label+":");
	   return null;
   }
   else
      return null;
}

public String visit(NodeSequence n) {
   String _ret=null;
   int _count=0;
   for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
      e.nextElement().accept(this);
      _count++;
   }
   return _ret;
}

public String visit(NodeToken n) { return null; }

//
// User-generated visitor methods below
//

/**
 * f0 -> "MAIN"
 * f1 -> "["
 * f2 -> IntegerLiteral()
 * f3 -> "]"
 * f4 -> "["
 * f5 -> IntegerLiteral()
 * f6 -> "]"
 * f7 -> "["
 * f8 -> IntegerLiteral()
 * f9 -> "]"
 * f10 -> StmtList()
 * f11 -> "END"
 * f12 -> ( Procedure() )*
 * f13 -> <EOF>
 */
public String visit(Goal n) {
	int stackSize=(Integer.parseInt(n.f8.f0.toString()))*4+4;
	printx(".text");
	printx(".globl    main");
	printx("main:");
	printx("move $fp, $sp");
	printx("subu $sp, $sp, "+stackSize);
	printx("sw $ra, -4($fp)");
	stackPars.push(0);
	
	n.f10.accept(this);
	
	stackPars.pop();
	printx("lw $ra, -4($fp)");
	printx("addu $sp, $sp, "+stackSize);
	printx("j $ra");
	
	n.f12.accept(this);
	
	printx("");
	printx(".text");
	printx(".globl _halloc");
	printx("_halloc:");
	printx("li $v0, 9");
	printx("syscall");
	printx("j $ra");
	printx(".text");
	printx(".globl _print");
	printx("_print:");
	printx("li $v0, 1");
	printx("syscall");
	printx("la $a0, newl");
	printx("li $v0, 4");
	printx("syscall");
	printx("j $ra");
	printx(".data");
	printx(".align   0");
	printx("newl:    .asciiz \"\\n\" ");
	printx(".data");
	printx(".align   0");
	printx("str_er:  .asciiz \" ERROR: abnormal termination\\n\" ");
	
	return null;
}

/**
 * f0 -> ( ( Label() )? Stmt() )*
 */
public String visit(StmtList n) {
   String _ret=null;
   n.f0.accept(this);
   return _ret;
}

/**
 * f0 -> Label()
 * f1 -> "["
 * f2 -> IntegerLiteral()
 * f3 -> "]"
 * f4 -> "["
 * f5 -> IntegerLiteral()
 * f6 -> "]"
 * f7 -> "["
 * f8 -> IntegerLiteral()
 * f9 -> "]"
 * f10 -> StmtList()
 * f11 -> "END"
 */
public String visit(Procedure n) {
	int parSize=Integer.parseInt(n.f2.f0.toString());
	int maxSize=Integer.parseInt(n.f8.f0.toString());
	int stackSize=Integer.parseInt(n.f5.f0.toString());
	stackSize=(stackSize-(parSize-4)+maxSize+2)*4;
	
	printx("");
	printx(".text");
	printx(".globl    "+n.f0.f0.toString());
	printx(n.f0.f0.toString()+":");
	printx("sw $fp, -8($sp)");
	printx("move $fp, $sp");
	printx("subu $sp, $sp, "+stackSize);
	printx("sw $ra, -4($fp)");
	stackPars.push(parSize-4);
	
	n.f10.accept(this);
	
	stackPars.pop();
	printx("lw $ra, -4($fp)");
	printx("lw $fp, "+(stackSize-8)+"($sp)");
	printx("addu $sp, $sp, "+stackSize);
	printx("j $ra");
	
	return null;
}

/**
 * f0 -> NoOpStmt()
 *       | ErrorStmt()
 *       | CJumpStmt()
 *       | JumpStmt()
 *       | HStoreStmt()
 *       | HLoadStmt()
 *       | MoveStmt()
 *       | PrintStmt()
 *       | ALoadStmt()
 *       | AStoreStmt()
 *       | PassArgStmt()
 *       | CallStmt()
 */
public String visit(Stmt n) {
   String _ret=null;
   n.f0.accept(this);
   return _ret;
}

/**
 * f0 -> "NOOP"
 */
public String visit(NoOpStmt n) {
	printx("nop");
	return null;
}

/**
 * f0 -> "ERROR"
 */
public String visit(ErrorStmt n) {
   String _ret=null;
   n.f0.accept(this);
   return _ret;
}

/**
 * f0 -> "CJUMP"
 * f1 -> Reg()
 * f2 -> Label()
 */
public String visit(CJumpStmt n) {
   String t=n.f1.accept(this);
   String label=n.f2.accept(this);
   printx("beqz "+t+", "+label);
   return null;
}

/**
 * f0 -> "JUMP"
 * f1 -> Label()
 */
public String visit(JumpStmt n) {
   String label=n.f1.accept(this);
   printx("j "+label);
   return null;
}

/**
 * f0 -> "HSTORE"
 * f1 -> Reg()
 * f2 -> IntegerLiteral()
 * f3 -> Reg()
 */
public String visit(HStoreStmt n) { 
   String t1=n.f1.accept(this);
   String offset=n.f2.accept(this);
   String t2=n.f3.accept(this);
   printx("sw "+t2+", "+offset+"("+t1+")");
   return null;
}

/**
 * f0 -> "HLOAD"
 * f1 -> Reg()
 * f2 -> Reg()
 * f3 -> IntegerLiteral()
 */
public String visit(HLoadStmt n) {
	String t1=n.f1.accept(this);
	String t2=n.f2.accept(this);
	String offset=n.f3.accept(this);
	printx("lw "+t1+", "+offset+"("+t2+")");
	return null;
}

/**
 * f0 -> "MOVE"
 * f1 -> Reg()
 * f2 -> Exp()
 */
public String visit(MoveStmt n) {
	expType=3;
	String t1=n.f1.accept(this);
	String t2=n.f2.accept(this);
	
	if (expType==1) {						// HAllocate
		if (simpleType==1)					// Register 
			printx("move $a0, "+t2);
		else if (simpleType==2)				// Literal
			printx("li $a0, "+t2);
		printx("jal _halloc");
		printx("move "+t1+", $v0");
	}
	else if (expType==2) {					// BinOp
		if (simpleType==1) {				// Register
			if (opType==1)					// LT
				printx("slt "+t1+", "+t2);
			else if (opType==2) 			// PLUS
				printx("add "+t1+", "+t2);
			else if (opType==3)				// Minus
				printx("sub "+t1+", "+t2);
			else if (opType==4)				// Times
				printx("mul "+t1+", "+t2);
		}
		else if (simpleType==2) {			// Literal
			if (opType==1)					// LT
				printx("slti "+t1+", "+t2);
			else if (opType==2) 			// PLUS
				printx("addi "+t1+", "+t2);
			else if (opType==3)				// Minus
				printx("sub "+t1+", "+t2);
			else if (opType==4)				// Times
				printx("mul "+t1+", "+t2);
		}	
	}
	else {									// SimpleExp
		if (simpleType==1)					// Register
			printx("move "+t1+", "+t2);
		else if (simpleType==2)				// Literal
			printx("li "+t1+", "+t2);
		else if (simpleType==3)				// Label
			printx("la "+t1+", "+t2);
	}
	
	
	return null;
}

/**
 * f0 -> "PRINT"
 * f1 -> SimpleExp()
 */
public String visit(PrintStmt n) {
	String t1=n.f1.accept(this);
	printx("move $a0, "+t1);
	printx("jal _print");
	return null;
}

/**
 * f0 -> "ALOAD"
 * f1 -> Reg()
 * f2 -> SpilledArg()
 */
public String visit(ALoadStmt n) {
   String t1=n.f1.accept(this);
   String t2=n.f2.accept(this);
   printx("lw "+t1+", "+t2);
   return null;
}

/**
 * f0 -> "ASTORE"
 * f1 -> SpilledArg()
 * f2 -> Reg()
 */
public String visit(AStoreStmt n) {
	String t1=n.f1.accept(this);
	String t2=n.f2.accept(this);
	printx("sw "+t2+", "+t1);
	return null;
}

/**
 * f0 -> "PASSARG"
 * f1 -> IntegerLiteral()
 * f2 -> Reg()
 */
public String visit(PassArgStmt n) {
	int offset=(Integer.parseInt(n.f1.f0.toString())-1)*4;
	String t=n.f2.accept(this);
	printx("sw "+t+", "+offset+"($sp)");
	return null;
}

/**
 * f0 -> "CALL"
 * f1 -> SimpleExp()
 */
public String visit(CallStmt n) {
	String t1=n.f1.accept(this);
	if (simpleType==1)
		printx("jalr "+t1);
	else if (simpleType==2)
		printx("j "+t1);
   return null;
}

/**
 * f0 -> HAllocate()
 *       | BinOp()
 *       | SimpleExp()
 */
public String visit(Exp n) {
   return n.f0.accept(this);
}

/**
 * f0 -> "HALLOCATE"
 * f1 -> SimpleExp()
 */
public String visit(HAllocate n) {
	expType=1;
	return n.f1.accept(this);
}

/**
 * f0 -> Operator()
 * f1 -> Reg()
 * f2 -> SimpleExp()
 */
public String visit(BinOp n) {
	expType=2;
	n.f0.accept(this);
	String t1=n.f1.accept(this);
	String t2=n.f2.accept(this);	
	
	return (t1+", "+t2);
}

/**
 * f0 -> "LT"
 *       | "PLUS"
 *       | "MINUS"
 *       | "TIMES"
 */
public String visit(Operator n) {
	if (n.f0.choice.toString()=="LT") opType=1;
	else if (n.f0.choice.toString()=="PLUS") opType=2;
	else if (n.f0.choice.toString()=="MINUS") opType=3;
	else if (n.f0.choice.toString()=="TIMES") opType=4;
	return null;
}

/**
 * f0 -> "SPILLEDARG"
 * f1 -> IntegerLiteral()
 */
public String visit(SpilledArg n) {
	int parSize=stackPars.peek();
	int offset=Integer.parseInt(n.f1.f0.toString());
	if (offset>=parSize) 
		return -(offset-parSize+3)*4+"($fp)";
	else 
		return offset*4+"($fp)";
}

/**
 * f0 -> Reg()
 *       | IntegerLiteral()
 *       | Label()
 */
public String visit(SimpleExp n) {
	return n.f0.accept(this);
}

/**
 * f0 -> "a0"
 *       | "a1"
 *       | "a2"
 *       | "a3"
 *       | "t0"
 *       | "t1"
 *       | "t2"
 *       | "t3"
 *       | "t4"
 *       | "t5"
 *       | "t6"
 *       | "t7"
 *       | "s0"
 *       | "s1"
 *       | "s2"
 *       | "s3"
 *       | "s4"
 *       | "s5"
 *       | "s6"
 *       | "s7"
 *       | "t8"
 *       | "t9"
 *       | "v0"
 *       | "v1"
 */
public String visit(Reg n) {
	simpleType=1;
	return "$"+n.f0.choice.toString();
}

/**
 * f0 -> <INTEGER_LITERAL>
 */
public String visit(IntegerLiteral n) {
	simpleType=2;
	return n.f0.toString();
}

/**
 * f0 -> <IDENTIFIER>
 */
public String visit(Label n) {
	simpleType=3;
	return n.f0.toString();
}

}

